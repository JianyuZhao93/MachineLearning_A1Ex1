%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%
% Estimating velocity motion model through linear regression
% K-fold cross-validation
% 
% Main document
%
% Author: Jianyu Zhao
% Last revised: 11.06.2016
%
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

load('Data.mat');
%LinearRegression(Input,Output,1,1);
inorg = Input; out = Output; p1 = 1; p2 = 1;

inorg = inorg'; 
in = [inorg inorg(:,1).*inorg(:,2)]; 
out = out';

% calculate the size of parameter columns
n1 = 3*p1 +1;
n2 = 3*p2 +1;

% size of exemplar
n = size(in,1);

% initialization

j = 0;
alpha = 1;
converged = 0;

%% iteration of the parameter for x
x = out(:,1);
wj = zeros(n1,1);

% add intercept variable and form the input for position coordinates
in_p = ones(n,1); 
for i=1:p1
    in_p = [in_p in.^i];
end
%% error_x = @(w) (x-in_p*w)'*(x-in_p*w)*(1/n);
while ~converged
    % compute next iteration
    wj = wj - 2*alpha*in_p'*(in_p*wj - x)*(1/n);
    j = j+1;
    fprintf('Iteration: %d, wj: %f\n', j, wj(1))
    
    % iteration boundary
    if norm(in_p*wj-x) < 1e-3
        converged = 1;
        fprintf('Final error: %f\n', norm(xit-xstar))
    elseif isnan(norm(in_p*wj-x))
        break
    end
    
end

%para = LinearRegression(Input,Output,1,1);
%para